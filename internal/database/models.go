// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type AccountType string

const (
	AccountTypeGithub AccountType = "github"
	AccountTypeGoogle AccountType = "google"
	AccountTypeEmail  AccountType = "email"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType
	Valid       bool // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type DifficultyEnum string

const (
	DifficultyEnumEasy        DifficultyEnum = "easy"
	DifficultyEnumMedium      DifficultyEnum = "medium"
	DifficultyEnumHard        DifficultyEnum = "hard"
	DifficultyEnumUnspecified DifficultyEnum = "unspecified"
)

func (e *DifficultyEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DifficultyEnum(s)
	case string:
		*e = DifficultyEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for DifficultyEnum: %T", src)
	}
	return nil
}

type NullDifficultyEnum struct {
	DifficultyEnum DifficultyEnum
	Valid          bool // Valid is true if DifficultyEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDifficultyEnum) Scan(value interface{}) error {
	if value == nil {
		ns.DifficultyEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DifficultyEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDifficultyEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DifficultyEnum), nil
}

type LanguageEnum string

const (
	LanguageEnumJavascript LanguageEnum = "javascript"
	LanguageEnumTypescript LanguageEnum = "typescript"
	LanguageEnumPython     LanguageEnum = "python"
)

func (e *LanguageEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LanguageEnum(s)
	case string:
		*e = LanguageEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for LanguageEnum: %T", src)
	}
	return nil
}

type NullLanguageEnum struct {
	LanguageEnum LanguageEnum
	Valid        bool // Valid is true if LanguageEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLanguageEnum) Scan(value interface{}) error {
	if value == nil {
		ns.LanguageEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LanguageEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLanguageEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LanguageEnum), nil
}

type ProblemTypeEnum string

const (
	ProblemTypeEnumDsa         ProblemTypeEnum = "dsa"
	ProblemTypeEnumBugFix      ProblemTypeEnum = "bug_fix"
	ProblemTypeEnumRefactoring ProblemTypeEnum = "refactoring"
	ProblemTypeEnumReact       ProblemTypeEnum = "react"
	ProblemTypeEnumFunctional  ProblemTypeEnum = "functional"
	ProblemTypeEnumMisc        ProblemTypeEnum = "misc"
)

func (e *ProblemTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProblemTypeEnum(s)
	case string:
		*e = ProblemTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ProblemTypeEnum: %T", src)
	}
	return nil
}

type NullProblemTypeEnum struct {
	ProblemTypeEnum ProblemTypeEnum
	Valid           bool // Valid is true if ProblemTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProblemTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ProblemTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProblemTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProblemTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProblemTypeEnum), nil
}

type SubmissionStatusEnum string

const (
	SubmissionStatusEnumPending SubmissionStatusEnum = "pending"
	SubmissionStatusEnumPassed  SubmissionStatusEnum = "passed"
	SubmissionStatusEnumFailed  SubmissionStatusEnum = "failed"
)

func (e *SubmissionStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubmissionStatusEnum(s)
	case string:
		*e = SubmissionStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SubmissionStatusEnum: %T", src)
	}
	return nil
}

type NullSubmissionStatusEnum struct {
	SubmissionStatusEnum SubmissionStatusEnum
	Valid                bool // Valid is true if SubmissionStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubmissionStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SubmissionStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubmissionStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubmissionStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubmissionStatusEnum), nil
}

type TagEnum string

const (
	TagEnumArray        TagEnum = "array"
	TagEnumString       TagEnum = "string"
	TagEnumTree         TagEnum = "tree"
	TagEnumGraph        TagEnum = "graph"
	TagEnumMath         TagEnum = "math"
	TagEnumDp           TagEnum = "dp"
	TagEnumSorting      TagEnum = "sorting"
	TagEnumSearching    TagEnum = "searching"
	TagEnumBug          TagEnum = "bug"
	TagEnumSyntax       TagEnum = "syntax"
	TagEnumLogic        TagEnum = "logic"
	TagEnumPerformance  TagEnum = "performance"
	TagEnumRefactoring  TagEnum = "refactoring"
	TagEnumCleanCode    TagEnum = "clean_code"
	TagEnumOptimization TagEnum = "optimization"
	TagEnumReact        TagEnum = "react"
	TagEnumComponent    TagEnum = "component"
	TagEnumHooks        TagEnum = "hooks"
	TagEnumState        TagEnum = "state"
	TagEnumProps        TagEnum = "props"
	TagEnumContext      TagEnum = "context"
	TagEnumRedux        TagEnum = "redux"
	TagEnumFunctional   TagEnum = "functional"
	TagEnumCurrying     TagEnum = "currying"
	TagEnumComposition  TagEnum = "composition"
	TagEnumImmutability TagEnum = "immutability"
	TagEnumMisc         TagEnum = "misc"
)

func (e *TagEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TagEnum(s)
	case string:
		*e = TagEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for TagEnum: %T", src)
	}
	return nil
}

type NullTagEnum struct {
	TagEnum TagEnum
	Valid   bool // Valid is true if TagEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTagEnum) Scan(value interface{}) error {
	if value == nil {
		ns.TagEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TagEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTagEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TagEnum), nil
}

type Account struct {
	ID          int32
	UserID      int32
	AccountType AccountType
	GithubID    sql.NullString
	GoogleID    sql.NullString
	Password    sql.NullString
	Salt        sql.NullString
}

type Problem struct {
	ID                uuid.UUID
	Title             string
	Description       string
	ProblemType       ProblemTypeEnum
	Difficulty        DifficultyEnum
	LanguageSupported []LanguageEnum
	InputDescription  sql.NullString
	OutputDescription sql.NullString
	TestCases         pqtype.NullRawMessage
	CodeTemplates     pqtype.NullRawMessage
	SampleSolutions   pqtype.NullRawMessage
	Tags              []TagEnum
	CreatorID         sql.NullInt32
	CreatedAt         sql.NullTime
}

type Profile struct {
	ID          int32
	UserID      int32
	DisplayName sql.NullString
	ImageID     sql.NullString
	Image       sql.NullString
	Bio         string
}

type Session struct {
	ID        string
	UserID    int32
	ExpiresAt time.Time
}

type Submission struct {
	ID               uuid.UUID
	UserID           sql.NullInt32
	ProblemID        uuid.NullUUID
	Language         LanguageEnum
	Code             string
	Status           SubmissionStatusEnum
	ExecutionTime    sql.NullFloat64
	EvaluationOutput sql.NullString
	CreatedAt        sql.NullTime
}

type User struct {
	ID            int32
	Email         string
	EmailVerified sql.NullTime
}
