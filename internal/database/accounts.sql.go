// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package database

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
    user_id, 
    account_type, 
    github_id, 
    google_id, 
    password, 
    salt
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, account_type, github_id, google_id, password, salt
`

type CreateAccountParams struct {
	UserID      int32
	AccountType AccountType
	GithubID    sql.NullString
	GoogleID    sql.NullString
	Password    sql.NullString
	Salt        sql.NullString
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.UserID,
		arg.AccountType,
		arg.GithubID,
		arg.GoogleID,
		arg.Password,
		arg.Salt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountType,
		&i.GithubID,
		&i.GoogleID,
		&i.Password,
		&i.Salt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE user_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, userID)
	return err
}

const getAccountByGithubId = `-- name: GetAccountByGithubId :one
SELECT id, user_id, account_type, github_id, google_id, password, salt FROM account
WHERE github_id = $1
`

func (q *Queries) GetAccountByGithubId(ctx context.Context, githubID sql.NullString) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByGithubId, githubID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountType,
		&i.GithubID,
		&i.GoogleID,
		&i.Password,
		&i.Salt,
	)
	return i, err
}

const getAccountByGoogleId = `-- name: GetAccountByGoogleId :one
SELECT id, user_id, account_type, github_id, google_id, password, salt FROM account
WHERE google_id = $1
`

func (q *Queries) GetAccountByGoogleId(ctx context.Context, googleID sql.NullString) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByGoogleId, googleID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountType,
		&i.GithubID,
		&i.GoogleID,
		&i.Password,
		&i.Salt,
	)
	return i, err
}

const getAccountByUserId = `-- name: GetAccountByUserId :one
SELECT id, user_id, account_type, github_id, google_id, password, salt FROM account
WHERE user_id = $1
`

func (q *Queries) GetAccountByUserId(ctx context.Context, userID int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUserId, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountType,
		&i.GithubID,
		&i.GoogleID,
		&i.Password,
		&i.Salt,
	)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :exec
UPDATE account
SET password = $2, salt = $3
WHERE user_id = $1
`

type UpdateAccountPasswordParams struct {
	UserID   int32
	Password sql.NullString
	Salt     sql.NullString
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountPassword, arg.UserID, arg.Password, arg.Salt)
	return err
}
