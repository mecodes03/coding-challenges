// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, email_verified)
VALUES ($1, $2)
RETURNING id, email, email_verified
`

type CreateUserParams struct {
	Email         string
	EmailVerified sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.EmailVerified)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.EmailVerified)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, email_verified FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.EmailVerified)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, email_verified FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.EmailVerified)
	return i, err
}

const updateUserEmailVerification = `-- name: UpdateUserEmailVerification :one
UPDATE users
SET email_verified = $2
WHERE id = $1
RETURNING id, email, email_verified
`

type UpdateUserEmailVerificationParams struct {
	ID            int32
	EmailVerified sql.NullTime
}

func (q *Queries) UpdateUserEmailVerification(ctx context.Context, arg UpdateUserEmailVerificationParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailVerification, arg.ID, arg.EmailVerified)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.EmailVerified)
	return i, err
}
