// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO session (
    id, 
    user_id, 
    expires_at
)
VALUES ($1, $2, $3)
RETURNING id, user_id, expires_at
`

type CreateSessionParams struct {
	ID        string
	UserID    int32
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID, arg.ExpiresAt)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM session
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM session
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, expires_at FROM session
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return i, err
}

const getSessionsByUserId = `-- name: GetSessionsByUserId :many
SELECT id, user_id, expires_at FROM session
WHERE user_id = $1
`

func (q *Queries) GetSessionsByUserId(ctx context.Context, userID int32) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(&i.ID, &i.UserID, &i.ExpiresAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
